syntax = "proto3";

package nlp;

// NLP Service definition
service NLPService {
  // Tokenize text into words
  rpc Tokenize(TokenizeRequest) returns (TokenizeResponse);
  
  // Perform sentiment analysis
  rpc SentimentAnalysis(SentimentRequest) returns (SentimentResponse);
  
  // Extract named entities
  rpc NamedEntityRecognition(NERRequest) returns (NERResponse);
  
  // Part-of-speech tagging
  rpc POSTagging(POSRequest) returns (POSResponse);
  
  // Calculate text similarity
  rpc TextSimilarity(SimilarityRequest) returns (SimilarityResponse);
  
  // Extract keywords from text
  rpc KeywordExtraction(KeywordRequest) returns (KeywordResponse);
}

// Request/Response messages
message TokenizeRequest {
  string text = 1;
  string language = 2;  // Optional, defaults to "english"
}

message TokenizeResponse {
  repeated string tokens = 1;
  int32 token_count = 2;
}

message SentimentRequest {
  string text = 1;
}

message SentimentResponse {
  string sentiment = 1;  // "positive", "negative", "neutral"
  double confidence = 2;
}

message NERRequest {
  string text = 1;
}

message NERResponse {
  repeated NamedEntity entities = 1;
}

message NamedEntity {
  string text = 1;
  string label = 2;
  int32 start = 3;
  int32 end = 4;
}

message POSRequest {
  string text = 1;
}

message POSResponse {
  repeated POSTag tags = 1;
}

message POSTag {
  string word = 1;
  string tag = 2;
}

message SimilarityRequest {
  string text1 = 1;
  string text2 = 2;
}

message SimilarityResponse {
  double similarity = 1;
}

message KeywordRequest {
  string text = 1;
  int32 max_keywords = 2;  // Optional, defaults to 10
}

message KeywordResponse {
  repeated Keyword keywords = 1;
}

message Keyword {
  string word = 1;
  double score = 2;
}
