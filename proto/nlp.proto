syntax = "proto3";

package nlp;

// NLP Service definition
service NLPService {
  // Tokenize text into words
  rpc Tokenize(TokenizeRequest) returns (TokenizeResponse);
  
  // Perform sentiment analysis
  rpc SentimentAnalysis(SentimentRequest) returns (SentimentResponse);
  
  // Extract named entities
  rpc NamedEntityRecognition(NERRequest) returns (NERResponse);
  
  // Part-of-speech tagging
  rpc POSTagging(POSRequest) returns (POSResponse);
  
  // Calculate text similarity
  rpc TextSimilarity(SimilarityRequest) returns (SimilarityResponse);
  
  // Extract keywords from text
  rpc KeywordExtraction(KeywordRequest) returns (KeywordResponse);
  
  // Summarize text
  rpc TextSummarization(SummarizationRequest) returns (SummarizationResponse);
  
  // FrameNet API endpoints
  rpc FrameSearch(FrameSearchRequest) returns (FrameSearchResponse);
  rpc FrameDetails(FrameDetailsRequest) returns (FrameDetailsResponse);
  rpc LexicalUnitSearch(LexicalUnitSearchRequest) returns (LexicalUnitSearchResponse);
  rpc FrameRelations(FrameRelationsRequest) returns (FrameRelationsResponse);
  rpc SemanticRoleLabeling(SemanticRoleLabelingRequest) returns (SemanticRoleLabelingResponse);
}

// Request/Response messages
message TokenizeRequest {
  string text = 1;
  string language = 2;  // Optional, defaults to "english"
}

message TokenizeResponse {
  repeated string tokens = 1;
  int32 token_count = 2;
}

message SentimentRequest {
  string text = 1;
}

message SentimentResponse {
  string sentiment = 1;  // "positive", "negative", "neutral"
  double confidence = 2;
}

message NERRequest {
  string text = 1;
}

message NERResponse {
  repeated NamedEntity entities = 1;
}

message NamedEntity {
  string text = 1;
  string label = 2;
  int32 start = 3;
  int32 end = 4;
}

message POSRequest {
  string text = 1;
}

message POSResponse {
  repeated POSTag tags = 1;
}

message POSTag {
  string word = 1;
  string tag = 2;
}

message SimilarityRequest {
  string text1 = 1;
  string text2 = 2;
}

message SimilarityResponse {
  double similarity = 1;
}

message KeywordRequest {
  string text = 1;
  int32 max_keywords = 2;  // Optional, defaults to 10
}

message KeywordResponse {
  repeated Keyword keywords = 1;
}

message Keyword {
  string word = 1;
  double score = 2;
}

message SummarizationRequest {
  string text = 1;
  int32 max_sentences = 2;  // Optional, defaults to 3
}

message SummarizationResponse {
  string summary = 1;
  int32 original_sentence_count = 2;
  int32 summary_sentence_count = 3;
}

// FrameNet API Messages
message FrameSearchRequest {
  string name_pattern = 1;  // Optional regex pattern to match frame names
  int32 max_results = 2;    // Optional, defaults to 50
}

message FrameSearchResponse {
  repeated FrameInfo frames = 1;
  int32 total_count = 2;
}

message FrameInfo {
  int32 id = 1;
  string name = 2;
  string definition = 3;
  repeated string lexical_units = 4;  // Just the names for quick overview
}

message FrameDetailsRequest {
  oneof identifier {
    int32 frame_id = 1;
    string frame_name = 2;
  }
}

message FrameDetailsResponse {
  int32 id = 1;
  string name = 2;
  string definition = 3;
  repeated LexicalUnit lexical_units = 4;
  repeated FrameElement frame_elements = 5;
  repeated FrameRelation frame_relations = 6;
  repeated SemanticType semantic_types = 7;
}

message LexicalUnit {
  int32 id = 1;
  string name = 2;
  string pos = 3;
  string definition = 4;
  string status = 5;
}

message FrameElement {
  int32 id = 1;
  string name = 2;
  string definition = 3;
  string core_type = 4;  // Core, Peripheral, Extra-Thematic
  string abbreviation = 5;
}

message FrameRelation {
  int32 id = 1;
  string type = 2;
  string parent_frame = 3;
  string child_frame = 4;
  string description = 5;
}

message SemanticType {
  int32 id = 1;
  string name = 2;
  string abbreviation = 3;
  string definition = 4;
}

message LexicalUnitSearchRequest {
  string name_pattern = 1;  // Optional regex pattern
  string frame_pattern = 2; // Optional frame name pattern
  int32 max_results = 3;    // Optional, defaults to 50
}

message LexicalUnitSearchResponse {
  repeated LexicalUnitInfo lexical_units = 1;
  int32 total_count = 2;
}

message LexicalUnitInfo {
  int32 id = 1;
  string name = 2;
  string pos = 3;
  string definition = 4;
  string frame_name = 5;
  int32 frame_id = 6;
}

message FrameRelationsRequest {
  oneof identifier {
    int32 frame_id = 1;
    string frame_name = 2;
  }
  string relation_type = 3;  // Optional filter by relation type
}

message FrameRelationsResponse {
  repeated FrameRelation relations = 1;
  repeated string relation_types = 2;  // Available relation types
}

message SemanticRoleLabelingRequest {
  string text = 1;
  bool include_frame_elements = 2;  // Include detailed FE info
}

message SemanticRoleLabelingResponse {
  repeated SemanticFrame semantic_frames = 1;
}

message SemanticFrame {
  string frame_name = 1;
  int32 frame_id = 2;
  string trigger_word = 3;
  int32 trigger_start = 4;
  int32 trigger_end = 5;
  repeated SemanticRole roles = 6;
}

message SemanticRole {
  string role_name = 1;
  string role_type = 2;  // Core, Peripheral, Extra-Thematic
  string text = 3;
  int32 start = 4;
  int32 end = 5;
}
